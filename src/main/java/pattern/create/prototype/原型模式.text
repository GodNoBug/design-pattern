原型模式
    用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。
    
原型模式包含如下角色：

  - 抽象原型类：规定了具体原型对象必须实现的的 clone() 方法。
  - 具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。
  - 访问类：使用具体原型类中的 clone() 方法来复制新的对象。

原型模式是克隆
  - 浅克隆：创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，仍指向原有属性所指向的对象的内存地址。
  - 深克隆：创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。
        1.重写clone方法使用父类中的clone()方法实现深克隆
            声明一个对象A变量
            调用super.clone()先完成对基本数据类型和String类型的拷贝,然后赋值给这个对象A
            再在clone方法中调用成员变量为对象类型的clone方法赋值给对象A的成员变量
            返回对象变量A
        2，重写clone方法中,通过对象序列化实现深拷贝
            先流对象把当前对象A输出到硬盘,再输入流到内存,对象A和所关联的对象输出到读入后,就和原对象不一样了
            对象A和所关联的对象必须实现可序列化接口,对象A需要实现Cloneable

  Java中的Object类中提供了 `clone()` 方法来实现浅克隆。 Cloneable 接口是上面的类图中的抽象原型类，
  而实现了Cloneable接口的子实现类就是具体的原型类。代码如下：

使用场景
    * 对象的创建非常复杂，可以使用原型模式快捷的创建对象。
    * 性能和安全要求比较高。
