
1.工厂模式是为了解耦: 把对象的创建和使用的过程分开。
  就是Class A 想调用 Class B ，那么A只是调用B的方法，而至于B的实例化，就交给工厂类。
  如果要更换Class B对象,直接在工厂里更换该对象即可,做到了解耦

2.工厂模式可以降低代码重复。如果创建对象B的过程都很复杂，需要一定的代码量，而且很多
  地方都要用到，那么就会有很多的重复代码。我们可以这些创建对象B的代码放到工厂里统一管理。既
  减少了重复代码，也方便以后对B的创建过程的修改维护。（当然，我个人觉得也可以把这些创建过程
  的代码放到类的构造函数里，同样可以降低重复率，而且构造函数本身的作用也是初始化对象。不过，
  这样也会导致构造函数过于复杂，做的事太多，不符合java 的设计原则。）

   由于创建过程都由工厂统一管理，所以发生业务逻辑变化，不需要找到所有需要创建B的地方去逐个修正，
   只需要在工厂里修改即可，降低维护成本。同理，想把所有调用B的地方改成B的子类B1，只需要在对应生产B的
   工厂中或者工厂的方法中修改其生产的对象为B1即可，而不需要找到所有的new B（）改为new B1()。

3.因为工厂管理了对象的创建逻辑，使用者并不需要知道具体的创建过程，只管使用即可，减少了使用者因为创建逻辑导致的错误。

分类:
    - 简单工厂模式
    - 工厂方法模式
    - 抽象工厂模式

简单工厂模式
    结构
        - 抽象产品: 定义了产品的规范,描述了产品的主要特性和功能,
                   抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口
        - 具体产品: 实现或者继承抽象产品的子类
        - 具体工厂: 提供了创建产品的方法,调用者通过该方法来获取产品(处理创建对象的细节)
    优缺点
        优点
            封装了创建对象的过程，可以通过参数直接获取对象。把对象的创建和业务逻辑层分开，这样以后就避
            免了修改客户代码，如果要实现新产品直接修改工厂类，而不需要在原代码中修改，这样就降低了客户
            代码修改的可能性，更加容易扩展。
        缺点
            增加新产品时还是需要修改工厂类的代码，违背了“开闭原则”。
    变体:
        静态工厂 也是简单工厂模式的变体,将工厂类中的创建对象的功能定义为静态的，这个就是静态工厂模式

工厂方法模式
        解决简单工厂模式违反开闭原则的问题。模板方法模式的应用
        定义一个用于创建对象的接口，让子类决定实例化哪个产品类对象。工厂方法使一个产品类的实例化延迟到其工厂的子类
    结构
        抽象工厂: 提供了创建产品的接口,调用者通过它访问具体工厂的过程方法来创建产品
        具体工厂: 主要是实现抽象工厂中的抽象方法,完成具体产品的创建
        抽象产品: 定义了产品的规范,描述了产品的主要特性和功能
        具体产品: 实现了抽象产品角色所定义的接口,有具体工厂来创建,它同具体工厂之间一一对应
    优缺点
        优点
            用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；
            在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；
        缺点
            每增加一个产品就需要增加一个具体产品类和一个对应的具体工厂类,这增加了系统的复杂度
    定位
        一类产品的生产.比如电视机厂只生产电视机,咖啡产只生产咖啡.只生产同种类型产品(同等级产品)
抽象工厂模式
        现实生活中工厂是综合性工厂,能生产多等级(种类)的产品,比如电器厂既生产电视机又生产洗衣机或空调,大学既有软件专业又有生物专业
        抽象工厂模式将考虑多等级产品的生产，将同一个具体工厂所生产的位于不同等级的一组产品称为一个产品族
    概念
        是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无序指定所要产品的具体类就能得到同族的不同等级的产品的模式结构
    角色
        抽象工厂: 提供了创建产品的接口,它包含多个创建产品的方法,可以创建多个不同等级的产品
        具体工厂: 主要是实现抽象工厂中的多个抽象方法,完成具体产品的创建
        抽象产品: 定义了产品的规范,描述了产品的主要特性和功能,抽象工厂模式有多个抽象产品
        具体产品：实现了抽象产品角色所定义的接口,有具体工厂来创建,它同具体工厂之间是多对一的关系
    优缺点
        优点
            当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。保证同一产品族中的对象搭配
        缺点
            当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。为了满足创建新产品功能的需要

使用场景
    工厂方法
    抽象工厂
        1.当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空
          调等。
        2.系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋。
        3.系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结
          构。
        如：输入法换皮肤，一整套一起换。生成不同操作系统的程序





