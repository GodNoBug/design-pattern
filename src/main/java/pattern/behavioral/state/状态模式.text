【例】通过按钮来控制一个电梯的状态，一个电梯有开门状态，关门状态，停止状态，运行状态。每一种状态改变，都有
    可能要根据其他状态来更新处理。例如，如果电梯门现在处于运行时状态，就不能进行开门操作，而如果电梯门是
    停止状态，就可以执行开门操作。
before
    问题分析：
        * 使用了大量的switch…case这样的判断(if…else也是一样)，使程序的可阅读性变差。
        * 扩展性很差。如果新加了断电的状态，我们需要修改上面判断逻辑
定义
    对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为。

结构
    状态模式包含以下主要角色。
        * 环境(Context)角色：也称为上下文，它定义了客户程序需要的接口，维护一个当前状态，并将与状态相关的操作委托给当前状态对象来处理。
        * 抽象状态(State)角色：定义一个接口，用以封装环境对象中的特定状态所对应的行为。
        * 具体状态(Concrete  State)角色：实现抽象状态所对应的行为。

优缺点

    优点：
        * 将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。
        * 允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。

    缺点：

        * 状态模式的使用必然会增加系统类和对象的个数。
        * 状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。
        * 状态模式对"开闭原则"的支持并不太好。

使用场景
    - 当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时，就可以考虑使用状态模式。
    - 一个操作中含有庞大的分支结构，并且这些分支决定于对象的状态时。